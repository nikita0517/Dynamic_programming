class Solution {
public:
int func(int i, vector<vector<int>>&jobs,vector<int>&startTime,vector<int>&dp,int n){
       if(i>=n)
       return 0;
       if(dp[i]!=-1)
       return dp[i];
       int ind=lower_bound(startTime.begin(),startTime.end(),jobs[i][1])-startTime.begin();
       int pick=jobs[i][2]+func(ind,jobs,startTime,dp,n);
       int notpick=func(i+1,jobs,startTime,dp,n);
       return dp[i]=max(pick,notpick);
}
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n=startTime.size();
        vector<vector<int>>jobs;
        vector<int>dp(n,-1);
        for(int i=0;i<n;i++){
            jobs.push_back({startTime[i],endTime[i],profit[i]});
        }
        sort(jobs.begin(),jobs.end());
        sort(startTime.begin(),startTime.end());
        return func(0,jobs,startTime,dp,n);
    }
};
